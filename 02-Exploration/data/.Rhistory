}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a, " ")
r <- 0
for ( i in 1:(z-1) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a, " ", b)
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a, " ", b, " ")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a, " ",b, " ")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a," ",b, " ")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a," ",b, " ", sep="")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a," ",b, " ", sep="")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b)
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a," ",b, " ", sep="")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ", sep="")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio <- function(z=5) {
a <- 1
b <- 1
cat(a," ",b, " ", sep="")
r <- 0
for ( i in 1:(z-2) ) {
c <- a + b
a <- b
b <- c
cat(b," ", sep="")
r <- a/b
}
cat("\n"); print(r)
}
fib.ratio(z=6)
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred, "prec", "rec")
plot(perf)
PRcurve <- function(preds, trues, ...) {
require(ROCR, quietly=T)
pd <- prediction(preds, trues)
pf <- performance(pd, "prec","rec")
pf@y.values <- lapply(pf@y.values, function(x) rev(cummax(rev(x))))
plot(pf, ...)
}
par(mfrow=c(1,2))
plot(perf)
PRcurve(ROCR.simple$predictions, ROCR.simple$labels)
# cumulative chart with rate of positive predictions
str(pred)
PRcurve <- function(preds, trues, ...) {
require(ROCR, quietly=T)
pd <- prediction(preds, trues)
pf <- performance(pd, "prec","rec")
pf@y.values <- lapply(pf@y.values, function(x) rev(cummax(rev(x))))
plot(pf, ...)
}
par(mfrow=c(1,2))
plot(perf)
PRcurve(ROCR.simple$predictions, ROCR.simple$labels)
cummax(c(3:1, 2:0, 4:2))
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred, "lift", "rpp")
plot(perf, main="Lift Chart")
CRchart <- function( preds, trues, ...) {
require(ROCR, quietly=T)
pd <- prediction(preds, trues)
pf <- performance(pd, "rec", "rpp")
plot(pf, ...)
}
CRchart(ROCR.simple$predictions, ROCR.simple$labels,
main='Cumulative Recall Chart')
# lift chart
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred, "lift", "rpp")
plot(perf, main="Lift Chart")
# cumulative chart with rate of positive predictions
CRchart <- function( preds, trues, ...) {
require(ROCR, quietly=T)
pd <- prediction(preds, trues)
pf <- performance(pd, "rec", "rpp")
plot(pf, ...)
}
par(mfrow=c(1,2))
CRchart(ROCR.simple$predictions, ROCR.simple$labels,
main='Cumulative Recall Chart')
# lift chart
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred, "lift", "rpp")
par(mfrow=c(1,2))
plot(perf, main="Lift Chart")
# cumulative chart with rate of positive predictions
CRchart <- function( preds, trues, ...) {
require(ROCR, quietly=T)
pd <- prediction(preds, trues)
pf <- performance(pd, "rec", "rpp")
plot(pf, ...)
}
CRchart(ROCR.simple$predictions, ROCR.simple$labels,
main='Cumulative Recall Chart')
# 4.3.2.3 normalized distances ####
avgNDTP <- function( toInsp, train, stats ) {
if(missing(train) && missing(stats))
stop('Provide either the training data or the product stats')
if(missing(stats)) {
notF <- which(train$Insp != 'fraud')
stats <- tapply(train$Uprice[notF],
list(Prod=train$Prod[notF]),
function(x) {
bp <- boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2])
})
stats <- matrix(unlist(stats),
length(stats), 2, byrow=T,
dimnames=list(names(stats), c('median','iqr')))
stats[which(stats[,'iqr']==0),'iqr'] <-
stats[which(stats[,'iqr']==0),'median']
}
mdtp <- mean(abs(toInsp$Uprice-stats[toInsp$Prod,'median']) /
stats[toInsp$Prod,'iqr'])
return(mdtp)
}
libray(dplyr)
library(dplyr)
x <- seq(-10, 10, .1)
x
x <- seq(0,1,0.05)
odds <- x/(1-x)
odds
plot(x, odds, type = line)
plot(x, odds, type = "l")
lodds <- log(odds)
plot(x, lodds, type="l")
plot(x, -(lodds), type="l")
loods
lodds
x
odds
x
odds
lodds
is.finite(lodds)
is.infinite(lodds)
sum(is.finite(odds))
sum(is.infinite(odds))
sum((is.infinite(odds)))
mode(odds)
typeof(odds)
g <- c("where")
typeof(g)
mode(g)
class(mean())
class(mean
)
mode(mean)
num.obj <- seq(1, 10, 2)
set.seed(1234)
mat.obj <- matrix(runif(9), ncol=3, nrow=3)
mode(num.obj)
mode(mat.obj)
class(num.obj)
class(mat.obj)
print(num.obj)
print(mat.obj)
install.packages(c("abind", "BH", "BradleyTerry2", "car", "caret", "colorspace", "CORElearn", "deldir", "digest", "forecast", "gbm", "gdata", "ggplot2", "gplots", "gtools", "manipulate", "mboost", "mime", "mvtnorm", "NLP", "plyr", "polyclip", "polyCub", "quantmod", "rattle", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "ROAuth", "ROCR", "RODBC", "RSNNS", "shiny", "sp", "spatstat", "stabs", "stringr", "surveillance", "timeDate", "tm", "tseries", "twitteR", "zoo"))
library(ggplot2)    # We'll use ggplot2 for all of our visualizations
library(plyr)       # For data manipulation
library(scales)     # We'll need to fix date formats in plots
library(ggplot2)
setwd("~/Documents/R/hackers/data/01-Introduction/data/ufo")
help.search("directory") # search help
list.files() # files in cwd
ufo <- read.delim("ufo_awesome.tsv", sep="\t",
header=FALSE, stringsAsFactors=FALSE, na.strings="")
head(ufo)
names(ufo) <- c("DateOccurred", "DateReported", "Location",
"ShortDescription", "Duration", "LongDescription")
ufo[,6] <- gsub("&quot;", "\"", ufo[,6])
ufo[,6] <- gsub("&apos;", "\'", ufo[,6])
head(ufo)
ufo[3,"LongDescription"]
text <- ufo[3,"LongDescription"]
regexpr("[CA]", text=text)
regexpr("[it]", text=text)
gregexpr("[it]", text=text)
match <- gregexpr("[it]", text=text)
summary(match)
match
match[[1]]
match[1]
match[[1]][1]
matching <- match
matching.length
m <- matrix(c(1,3,3,1), 2,2)
m
diag(m)
stopifnot(m==t(m), diag(m)==rep(1,2))
stopifnot(m==t(m), diag(m)==rep(1,3))
stopifnot(m==t(m), diag(m)==rep(2,2))
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format="%Y%m%d")
index <- sample(1:dim(ufo)[1], 10)
index
ufo$DateOccurred[index]
ufo$DateReported <- as.Date(ufo$DateReported, format="%Y%m%d")
table(nchar(ufo$DateOccurred))
ufo$DateOccurred[which(nchar(ufo$DateOccurred)==7)]
ufo$DateOccurred[which(nchar(ufo$DateOccurred)==1)]
ufo$DateReported <- as.Date(ufo$DateReported, format="%Y%m%d")
head(ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported !=8)),1])
names(ufo)
head(ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported !=8)),c(1,2)])
split.location <- function(l) {
# function will throw error
split.location <- tryCatch(strsplit(l,",")[[1]],
error=function(e) return(c(NA, NA)))
# remove space in front
clean.location <- gsub("^ ", "", split.location)
# city and state only, no international cities
if (length(clean.location)>2) {
return(c(NA, NA))
}
else {
}
return(clean.location)
}
city.state <- lapply(ufo$Location, split.location)
head(city.state)
location.matrix <- do.call(rbind, city.state)
head(location.matrix)
ufo <- transform(ufo,
USCity=location.matrix[,1],
USState=tolower(location.matrix[,2]),
stringsAsFactors=FALSE)
us.states <- c("ak", "al", "ar", "az", "ca", "co", "ct",
"de", "fl", "ga", "hi", "ia", "id", "il",
"in", "ks", "ky", "la", "ma", "md", "me",
"mi", "mn", "mo", "ms", "mt", "mc", "nd",
"ok", "or", "pa", "ri", "sc", "sd", "tn",
"tx", "ut", "va", "vt", "wa", "wi", "wv",
"ne", "nh", "nj", "nm", "nv", "ny", "oh",
"wy")
ufo$USState <- us.states[match(ufo$USState, us.states)]
ufo$USCity[is.na(ufo$USState)] <- NA
states.test <- c("ri", "va", "md", "wa", "wa", "tr")
match(states.test, us.states)
us.states[match(states.test, us.states)]
ufo.us <- subset(ufo, !is.na(ufo$USState))
head(ufo.us)
ufo.us <- ufo.us[!is.na(ufo.us$DateOccurred),]
dim(ufo.us)
tail(ufo$USState)
tail(ufo.us$USState)
install.packages(c("plyr", "RSNNS", "scales", "shiny", "surveillance"))
summary(ufo$DateOccurred)
library(scales)
library(png)
library(plyr)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="5 years", labels=date_format("%Y"))
library(ggplot2)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="5 years", labels=date_format("%Y"))
print(quick.hist)
ls()
files()
ls
ggsave(plot=quick.hist, file="../images/quick_hist.png", height=6, width=8)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="5 years", labels=date_format("%Y"))
ggsave(plot=quick.hist, file="../images/quick_hist.png", height=6, width=8)
png()
ggsave(plot=quick.hist, file="../images/quick_hist.png", height=6, width=8)
dev.off()
print(quick.hist)
ggsave(plot=quick.hist, file="../images/quick_hist.png", height=6, width=8)
png(plot=quick.hist, file="../images/quick_hist.png", height=600, width=800)
png(file="../images/quick_hist.png", height=600, width=800)
print(quick.hist)
dev.off()
print(quick.hist)
print(quick.hist)
ggsave(plot=quick.hist, filename="../images/quick_hist.png",
height=6, width=8)
library(png)
install.packages("png")
library(png)
ggsave(plot=quick.hist, filename="../images/quick_hist.png",
height=6, width=8)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="5 years", labels=date_format("%Y"))
png(file="../images/quick_hist.png", height=600, width=800)
print(quick.hist)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="50 years", labels=date_format("%Y"))
print(quick.hist)
ggsave(plot=quick.hist, filename="../images/quick_hist.png",
height=6, width=8)
ggsave(plot=quick.hist, filename="quick_hist.png",
height=6, width=8)
setwd("~/Documents/R/hackers/data/01-Introduction")
ggsave(plot=quick.hist, filename="~/images/quick_hist.png",
height=6, width=8)
ggsave(plot=quick.hist, filename="../images/quick_hist.png",
height=6, width=8)
ggsave(plot=quick.hist, filename="..\images\quick_hist.png",
ggsave(plot=quick.hist, filename="../images/quick_hist.png",
height=6, width=8)
ggsave(plot=quick.hist, filename="quick_hist.png",
height=6, width=8)
setwd("~/Documents/R/hackers/data/01-Introduction/images")
ggsave(plot=quick.hist, filename="quick_hist.png",
height=6, width=8)
ufo.us <- subset(ufo.us, DateOccurred>=as.Date("1990-01-01"))
nrow(ufo.us)
quick.hist <- ggplot(ufo.us, aes(x=DateOccurred)) + geom_histogram() +
scale_x_date(breaks="5 years", labels=date_format("%Y"))
print(quick.hist)
ufo.us$YearMonth <- strftime(ufo.us$DateOccurred, format="%Y-%m")
sightings.counts <- ddply(ufo.us, .(USState, YearMonth), nrow)
head(sightings.counts)
sightings.counts[sample(1:nrow(sightings.counts),10),]
date.range <- seq.Date(from=as.Date(min(ufo.us$DateOccurred)),
to=as.Date(max(ufo.us$DateOccurred)), by="month")
date.strings <- strftime(date.range, format="%Y-%m")
state.dates <- lapply(us.states, function(s) cbind(s,date.strings))
state.dates <- data.frame(do.call(rbind, state.dates), stringsAsFactors=FALSE)
all.sightings <- merge(state.dates, sightings.counts, by.x=c("s", "date.strings"),
by.y=c("USState", "YearMonth"), all=TRUE)
head(all.sightings)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0
head(all.sightings)
all.sightings$YearMonth <- as.Date(rep(date.range, length(us.states)))
str(all.sightings)
all.sightings$State <- as.factor(toupper(all.sightings$State))
save(all.sightings, file="allsightings.RData")
setwd("~/Documents/R/hackers/data/01-Introduction")
save(all.sightings, file="allsightings.RData")
load("allsightings.RData")
str(all.sightings)
state.plot <- ggplot(all.sightings, aes(x=YearMonth, y=Sightings))+
geom_line(aes(color="db"))+
facet_wrap(~State, nrow=10, ncol=5)+
theme_bw()+
scale_color_manual(values=c("db"="darkblue"))+
scale_x_date(breaks="5 years", labels=date_format("%Y"), legend=NULL)+
xlab("Time")+
ylab("Number of Sightings")+
labs(title="Number of UFO Sightings by Month-Year and U.S. State (1990-2010)")
setwd("~/Documents/R/hackers/data/01-Introduction/images")
ggsave(plot=state.plot, file="stateplot.pdf", width=14, height=9)
ggsave(plot=state.plot, file="stateplot.png", width=14, height=9)
setwd("~/Documents/R/hackers/data/02-Exploration/data")
file()
dir()
heights.weights <- read.csv("01_heights_weights_genders.csv",
header=TRUE, stringsAsFactors=FALSE,
sep=",")
summary(heights)
heights <- with(heights.weights, Height)
summary(heights)
str(heights.weights)
c(mean(heights),median(heights), range(heights))
quantile(heights)
my.var <- function(x) {
m <- mean(x)
return(sum((x-m)^2)/(length(x)-1))
}
my.var(heights)-var(heights) # should be 0
my.sd <- function(x) { # standard deviation
return(sqrt(my.var(x)))
}
my.sd(heights); my.var(heights)
c(mean(heights)-sd(heights), mean(heights)+sd(heights))
range(heights)
library(ggplot2)
c(mean(heights)-sd(heights), mean(heights)+sd(heights))
range(heights)
library(ggplot2)
ggplot(heights.weights, aes(x=Height))+
geom_histogram(binwidth=1) # bin width 1, default
ggplot(heights.weights, aes(x=Height))+
geom_histogram(binwidth=5) # bin width 5, too smooth
ggplot(heights.weights, aes(x=Height))+
geom_histogram(binwidth=0.01) # bin width 0.01
ggplot(heights.weights, aes(x=Height))+
geom_density()
ggplot(heights.weights, aes(x=Height, fill=Gender))+
geom_density()
ggplot(heights.weights, aes(x=Weight, fill=Gender))+
geom_density() # mixture of two standard dist mixed into nonstandard dist
ggplot(heights.weights, aes(x=Weight, fill=Gender))+
geom_density()+
facet_grid(Gender~ .)
ggplot(heights.weights, aes(x=Weight, fill=Gender))+
geom_density()+
facet_grid(. ~ Gender)
ggplot(heights.weights, aes(x=Weight, fill=Gender))+
geom_density()+
facet_grid(Gender ~ .) # (row ~ column)
set.seed(1)
normal.val <- rnorm(250, 0, 1)
cauchy.val <- rcauchy(250, 0, 1)
range(normal.val)
range(cauchy.val)
ggplot(data.frame(x = normal.val), aes(x = x)) +geom_density()
ggplot(data.frame(x = cauchy.val), aes(x = x)) + geom_density()
